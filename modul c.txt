modul c - netdevops
	
	untuk ubuntu isi password root agar mode cli dapat login sebagai root agar dapat panduan tabss(agar bisa di tab tab, soalnya menggunakan sudo su tidak bisa di tab tab)
	login user biasa lalu:
		#sudo su
		#passwd root
		#exit
		#exit
	lalu login sebagai root

	Install python3 and other required packages to run the code main.py
		#apt-get install python3
	
	 Enable python3 virtual environment and create a new virtual environment on
	“/opt/env/myenv”
		○ Install the required packages to run the code in this virtual environment
			#apt-get install python3-venv python3-virtualenv
			#python3 -m venv /opt/env/myenv
	
	Save the following code in directory “/opt/sample-web"
		#mkdir /opt/sample-web
		#nano /opt/sample-web/main.py
		lalu isikan:
		from flask import Flask
		from flask import request
		from flask import render_template

		sample = Flask(__name__,template_folder='/opt/sample-web/')--> harus diisi agar jinja2 dapat mencari file html kalau tidak internal error
		@sample.route("/") untuk alias misal ("/webku") #maka akan di akses dari url http://ipadd_atau_domain/webku
		def main():
			return render_template("index.html")

			if __name__== "__main__":
				sample.run(host="0.0.0.0",port=8080) #belum tau gunanya soalnya ketika dijalankan portnya tidak berubah, harus manual
		simpan dan keluar
		#nano /opt/sample-web/index.html
		lalu isikan:
		<html>
		<head>
			<title>Sample app</title>
		</head>
		<body>
			<h1> You are calling me from {{request.remote_addr}}</h1>
		</body>
		</html>
		simpan dan keluar
	 Make sure the code can be executed in the server without any trouble
		masuk ke env python:
			#source /opt/env/myenv/bin/activate
			#pip3 install flask
			#export FLASK_APP=/opt/sample-web/main.py --> kalau di linux export kalau di windows set
			#flask run -p 80 --> dapat diubah sesuka hati ingin port berapa
			#deactivate untuk keluar env
		lalu akses di browser dengan ip atau domain.

	Configure Docker in the development server, make sure user ‘patah’ can use docker
	command without sudo
		#sudo groupadd docker
		#sudo gpasswd -a $USER docker
		#newgrp docker
	
	Run registry server container
	membuat local registry
		#docker pull registry --> jika tidak diberi detail maka default menggunakan latest versi
		#docker run -p 5000:5000 -v /mnt/registry:/var/lib/registry --name registry registry:latest
		setelah itu jangan di ctrl+c itu registry sedang running jadi jangan ditunggu pindah workspace saja ctrl+alt+f1-10
	Pull image python:3.8-slim from Docker Hub.
	○ Push this image to the local registry container with the same name and tag
		#docker pull python:3.8-slim
		#docker tag python:3.8-slim localhost:5000/python:3.8-slim
		#docker push localhost:5000/python:3.8-slim
	Pull image nginx:latest from Docker Hub.
	○ Push this image to the local registry container with name webserver:base
		#docker pull nginx
		#docker tag nginx:latest localhost:5000/webserver:base
		#docker push localhost:5000/webserver:base
	cara pull/download dari komputer lain ke local/private registry/repo-dockerrr
		#docker pull 10.10.10.1:5000/python:3.8-slim --->ganti ip sesuai ip komputer private registry
		#docker pull 10.10.10.1:5000/webserver:base
		jika terdapat error karena ssl lakukan di bawah
		#nano /etc/docker/daemon.json
		lalu tambahkan
		{
			"insecure-registries" : ["10.10.10.1:5000"] --> ganti ip sesuai ip private registry
		}
		systemctl restart docker.service

	 Use the code Python Web Application in /opt/sample-web to create a Dockerfile
		○ Use base image python:3.8-slim
		○ Expose port 80
		○ Copy all code into workdir.
		○ Use /opt/sample-web as workdir inside the container.
		○ Save the Dockerfile in /opt/sample-web/Dockerfile
			masuk ke venv python lalu
			#cd /opt/sample-web/
			#pip freeze > /opt/sample-web/requirements.txt
			#nano /opt/sample-web/Dockerfile
			lalu isikan
			FROM python:3.8-slim
			WORKDIR /opt/sample-web
			EXPOSE 80
			COPY . .
			RUN pip3 install -r requirements.txt
			ENV FLASK_APP=/opt/sample-web/main.py
			CMD ["python3", "-m", "flask", "run", "-p","80"]
			simpan dan keluar
		Build the Dockerfile into image with name sampleweb:latest
		○ Run the application from this image
		○ Container Name : sampleweb
		○ Configure to Listen in Port 80
			#docker build --tag sampleweb:latest .
			#docker run -p 80:80 --network host --name sampleweb sampleweb:latest
		 Push the image to the local registry container with the same name and tag.
			#docker tag sampleweb:latest localhost:5000/sampleweb:latest
			#docker push localhost:5000/sampleweb:latest
		Use the image nginx:latest and create a container based web server serving the file
		public.html as specified in the appendix.
		○ Container name : farm-1
		○ Make it accessible via http://{ip_address}/public.html
		○ Do not expose any port on the host.
			#mkdir /opt/nginx-docker
			#cd /opt/nginx-docker
			#nano index.html
			isikan html sesuka hati
			#apt-get install nginx --> hanya diambil file vhostnya saja
			#cp /etc/nginx/sites-enabled/default /opt/nginx-docker/default.conf
			#nano /opt/nginx-docker/default.conf
			intinya edit di bagian
			location /public.html { --> jika hanya / maka ketika akses hanya ip atau domain saja, jika ditambahkan /public maka ketika search dapat dengan cara ipataudomain/public
				alias /var/www/html/index.html; --> JANGAN LUPA TITIK KOMA
			}
			#docker network create farm1-net
			#docker run --name farm-1 --network farm1-net -v /opt/nginx-docker:/opt/nginx-docker nginx:latest
			pindah workspace
			#docker exec -it farm1 /bin/bash
			akan berjalan bash container nginx
			#cp /opt/nginx-docker/default.conf /etc/nginx/conf.d/default.conf
			#mkdir -p /var/www/html
			#cp /opt/nginx-docker/index.html /var/www/html
			#service nginx restart
			#docker start farm1
		
		Use the image nginx:latest and create a container based web server serving the file
		external.html as specified in the appendix.
			○ Container name : farm-2
			○ Make it accessible via http://{ip_address}/external.html
			○ Do not expose any port on the host
				lakukan hal yang sama seperti diatas